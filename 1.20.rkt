#lang racket
(define (gdc a b)
  (if (= b 0)
      a
      (gdc b (remainder a b))))

(gdc 206 40) ; 4

; При нормальном порядке вычислений остаток будет вычислен 4 раза:
; 1. gdc 206 40 => r=6
; 2. gdc 40 6   => r=4
; 3. gdc 6 4    => r=2
; 4. gdc 4 2    => r=0
; 5. gdc 2 0    => return 0;
; При аппликативном порядке вычислений компилятор зациклится